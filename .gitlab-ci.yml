variables:
  IMAGE_TAG: "2020-03-30-01"
  LINARO_TOOLCHAIN_URL: "https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz"
  BOARDS: "odroid-c2 odroid-n2 p212 s400 p201 p200 u200 libretech-cc libretech-ac libretech-s905d-pc libretech-s912-pc khadas-vim khadas-vim2 khadas-vim3 khadas-vim3l nanopi-k2 sei510 sei610"

stages:
  - docker
  - build
  - run

build:docker:
  stage: docker
  tags: 
    - docker
  rules:
    - if: '$TEST_REPO'
      when: always
    - when: manual
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG && exit 0 || true
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG --tag $CI_REGISTRY_IMAGE:latest ./
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:latest

.build:
  tags: 
    - u-boot
  stage: build
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  rules:
    - if: '$TEST_REPO == ""'
      when: on_success
    - when: manual
  before_script:
    - "[ -d results ] || mkdir results"
    - "[ -d /tmp/toolchain ] || mkdir -p /tmp/toolchain"
    - git clone $UBOOT_URL --branch=$UBOOT_BRANCH --depth=1 /tmp/u-boot
    - wget -qO- $LINARO_TOOLCHAIN_URL  | tar -xJ --strip-components=1 -C /tmp/toolchain
    - git clone https://gitlab.com/superna9999/amlogic-boot-fip --depth=1 /tmp/fip

  script:
    - for board in $BOARDS ; do bash build.sh /tmp/toolchain/bin /tmp/u-boot $board /tmp/fip ; done

  after_script:
    - "for board in $BOARDS ; do [ -d /tmp/u-boot/build_$board ]  && ( mkdir -p results/$board ; cp /tmp/u-boot/build_$board/u-boot.bin results/$board/u-boot.orig.bin ) ; done"
    - "for board in $BOARDS ; do [ -d /tmp/u-boot/build_$board/fip ] && cp /tmp/u-boot/build_$board/fip/u-boot.bin* results/$board/ ; done"

  artifacts:
    when: always
    paths:
      - results/

.run:
  tags: 
    - u-boot-test
  stage: run
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG

  script:
    - bash run.sh $PWD/results/$BOARD/ "$BOARD" $PORT $TTY "$PROMPT"

  artifacts:
    when: always
    paths:
      - results/

build:master:
  extends: .build
  rules:
    - if: '$TEST_REPO == "master"'
      when: always
  variables:
    UBOOT_URL: "https://github.com/u-boot/u-boot"
    UBOOT_BRANCH: "master"

build:u-boot-amlogic:
  extends: .build
  rules:
    - if: '$TEST_REPO == "u-boot-amlogic"'
      when: always
  variables:
    UBOOT_URL: "https://gitlab.denx.de/u-boot/custodians/u-boot-amlogic"
    UBOOT_BRANCH: "u-boot-amlogic"

build:u-boot-amlogic-next:
  extends: .build
  rules:
    - if: '$TEST_REPO == "u-boot-amlogic-next"'
      when: always
  variables:
    UBOOT_URL: "https://gitlab.denx.de/u-boot/custodians/u-boot-amlogic"
    UBOOT_BRANCH: "u-boot-amlogic-next"

build:u-boot-amlogic-test:
  extends: .build
  rules:
    - if: '$TEST_REPO == "u-boot-amlogic-test"'
      when: always
  variables:
    UBOOT_URL: "https://gitlab.denx.de/u-boot/custodians/u-boot-amlogic"
    UBOOT_BRANCH: "u-boot-amlogic-test"

.run:master:libretech-cc:
  extends: .run
  needs: ["build:master"]
  dependencies:
    - build:master
  variables:
    BOARD: "libretech-cc"
    PORT: "4"
    TTY: "ttyUSB0"
    PROMPT: "=>"

.run:u-boot-amlogic:libretech-cc:
  extends: .run
  needs: ["build:u-boot-amlogic"]
  dependencies:
    - build:u-boot-amlogic
  variables:
    BOARD: "libretech-cc"
    PORT: "4"
    TTY: "ttyUSB0"
    PROMPT: "=>"

.run:u-boot-amlogic-next:libretech-cc:
  extends: .run
  needs: ["build:u-boot-amlogic-next"]
  dependencies:
    - build:u-boot-amlogic-next
  variables:
    BOARD: "libretech-cc"
    PORT: "4"
    TTY: "ttyUSB0"
    PROMPT: "=>"
